version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: aeon-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: aeon_analytics
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/00_init.sql
    restart: unless-stopped
    networks:
      - aeon-network

  redis:
    image: redis:alpine
    container_name: aeon-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - aeon-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: aeon-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVER_ID: 1
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    restart: unless-stopped
    networks:
      - aeon-network


  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: aeon-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    restart: unless-stopped
    networks:
      - aeon-network



  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: aeon-backend
    depends_on:
      - postgres
      - redis
      - kafka
    ports:
      - "3001:3001"
    environment:
      - DEBUG=express:*
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - aeon-network

  frontend:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: aeon-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://aeonanalytic.com/api
    volumes:
      - ./dashboard:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - aeon-network

networks:
  aeon-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  zookeeper_data:
  zookeeper_logs:
